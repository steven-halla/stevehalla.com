{"version":3,"sources":["localstorage.ts","components/TodoContext.tsx","components/Header.tsx","components/TodoTask.tsx","components/TodoList.tsx","App.tsx","index.tsx"],"names":["SAVE_KEY","TodoContext","React","createContext","TodoContextProvider","props","useState","todoList","setTodoList","useEffect","todoListJson","localStorage","getItem","JSON","parse","loadTodoList","setItem","stringify","saveTodoList","Provider","value","children","StyledHeader","styled","div","Header","useContext","taskName","setTaskName","deadline","setDeadline","className","Box","p","htmlFor","TextField","id","multiline","name","onChange","event","target","type","placeholder","variant","deadLine","Number","Button","color","onClick","task","trim","length","alert","validateTask","concat","startIcon","style","fontSize","StyledTodoTask","TodoTask","completeTask","showMore","setShowMore","isTextShortened","substr","StyledTodoList","TodoList","taskNameToDelete","filter","map","key","StyledApp","App","theme","createMuiTheme","palette","primary","light","main","dark","contrastText","secondary","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eb28a832.chunk.js","sourcesContent":["import {Task} from \"./model/Task\";\n\nconst SAVE_KEY = \"todoList\";\n\nexport const loadTodoList = (): Task[] => {\n    const todoListJson = localStorage.getItem(SAVE_KEY);\n    if (!todoListJson) {\n        return [];\n    }\n    return JSON.parse(todoListJson) as Task[];\n}\n\nexport const saveTodoList = (todoList: Task[]) => {\n    return localStorage.setItem(SAVE_KEY, JSON.stringify(todoList));\n}","import React, {FC, useEffect, useState} from 'react';\nimport {Task} from \"../model/Task\";\nimport {loadTodoList, saveTodoList} from \"../localstorage\";\n\ninterface TodoContextState {\n    todoList: Task[];\n    setTodoList: (todoList: Task[]) => void;\n}\n\nexport const TodoContext = React.createContext({} as TodoContextState);\n\nexport const TodoContextProvider: FC = (props) => {\n    const [todoList, setTodoList] = useState<Task[]>([]);\n\n    // when component loads, read todo list from local storage.\n    useEffect(() => {\n        setTodoList(loadTodoList());\n\n    }, []);\n\n    // a single place to handle saving todo list to local storage.\n    // this is easier than remembering to do it in both Header.addTask() and TodoTask.completeTask()\n    useEffect(() => {\n        saveTodoList(todoList);\n\n    }, [todoList]);\n\n    return (\n        <TodoContext.Provider\n            value={{\n                todoList, setTodoList,\n            }}\n        >\n            {props.children}\n        </TodoContext.Provider>\n    );\n};\n","import React, {FC, useState, ChangeEvent, useContext} from 'react';\n\nimport {Task} from '../model/Task'\nimport {TodoContext} from \"./TodoContext\";\nimport styled from \"styled-components\";\nimport Button from '@material-ui/core/Button';\nimport AddIcon from '@material-ui/icons/Add';\n\nimport {Box, TextField} from \"@material-ui/core\";\n\n\nconst StyledHeader = styled.div`\n  &.header {\n    display: flex;\n    width: 100%;\n    justify-content: center;\n    align-items: center;\n    background-color: tomato;\n    \n    .input-container {\n      display: flex;\n      flex-flow: row nowrap;\n\n      input {\n        background-color: white;\n        font-size: 17px;\n        border: 1px solid grey;\n      }\n\n      .task-name-input {\n        .MuiInputBase-root {\n          height: 58px;\n          background-color: white;\n        }\n\n        textarea {\n        }\n      }\n\n      .deadline-input {\n        input {\n          max-width: 80px;\n        }\n      }\n    }\n\n    button {\n      width: 70px;\n      height: 59px;\n      border-top-right-radius: 8px;\n      border-bottom-right-radius: 8px;\n      border: 1px solid grey;\n    }\n\n    .MuiSvgIcon-root {\n      display: flex;\n      justify-items: center;\n      padding-left: 16px;\n    }\n\n  }\n`;\n\nconst validateTask = (task: Task): boolean => {\n    if (!task.taskName || task.taskName.trim().length === 0) {\n        alert(\"Must provide task name.\");\n        return false;\n    }\n\n    // deadline not required, but validate if present.\n    if (task.deadline != null && task.deadline < 0) {\n        alert(\"Deadline must be greater than zero.\");\n        return false;\n    }\n\n    return true;\n}\n\nexport const Header: FC = () => {\n    const {todoList, setTodoList} = useContext(TodoContext);\n\n    const [taskName, setTaskName] = useState<string>(\"\");\n    const [deadline, setDeadline] = useState<number | string>(\"\"); // allow number | string because setting state for number input to undefined, does not clear the input.\n\n    const onChangeTaskName = (event: ChangeEvent<HTMLInputElement>): void => {\n        setTaskName(event.target.value);\n    };\n\n    const onChangeDeadline = (event: ChangeEvent<HTMLInputElement>): void => {\n        const deadLine = Number(event.target.value);\n        if (deadLine >= 0) {\n            setDeadline(deadLine);\n        } else {\n            setDeadline(\"\");\n        }\n    };\n\n    const addTask = (): void => {\n        const task: Task = {\n            taskName: taskName,\n            deadline: Number(deadline)\n        }\n\n        if (!validateTask(task)) {\n            return;\n        }\n\n        // prepend task to todo list\n        setTodoList([task].concat(todoList));\n\n        setTaskName(\"\");\n        setDeadline(\"\");\n    };\n\n    return (\n        <StyledHeader className=\"header\">\n            <div className=\"input-container\">\n                <Box p=\"10px\">\n                    <label htmlFor=\"task\">\n                        <TextField\n                            id=\"outlined-basic\"\n                            className=\"task-name-input\"\n                            multiline\n                            name=\"task\"\n                            onChange={onChangeTaskName}\n                            type=\"text\"\n                            placeholder=\"task\"\n                            value={taskName}\n                            variant=\"outlined\"\n                        />\n                    </label>\n                </Box>\n\n                <Box p=\"10px\">\n                    <label htmlFor=\"deadline\">\n                        <TextField\n                            id=\"outlined-basic\"\n                            className=\"deadline-input\"\n                            name=\"deadline\"\n                            onChange={onChangeDeadline}\n                            placeholder=\"days\"\n                            type=\"number\"\n                            value={deadline}\n                            variant=\"outlined\"\n                        />\n                    </label>\n                </Box>\n\n                <Box p=\"10px\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"primary\"\n                        onClick={addTask}\n                        startIcon={<AddIcon style={{fontSize: '60px'}}/>}>\n                    </Button>\n                </Box>\n            </div>\n        </StyledHeader>\n    );\n}\n","import React, {FC, useState} from 'react'\nimport {Task} from \"../model/Task\";\nimport styled from \"styled-components\";\nimport Button from '@material-ui/core/Button';\nimport CheckIcon from '@material-ui/icons/Check';\nimport {Box} from \"@material-ui/core\";\n\nconst StyledTodoTask = styled.div`\n  &.task {\n    width: 500px;\n    min-height: 50px;\n    display: flex;\n    color: black;\n    margin: 15px;\n\n    .content {\n      flex: 80%;\n      height: 100%;\n      display: flex;\n      justify-content: center;\n      align-items: center;\n\n      &:hover {\n        filter: brightness(90%);\n      }\n\n      .task-row-column {\n        margin-right: 4px;\n        display: grid;\n        padding: 16px;\n        place-items: center;\n        width: 100%;\n        height: 100%;\n        font-size: 18px;\n        background-color: #ddd;\n\n        &.task-name {\n          word-break: break-word;\n          .toggle-text-button {\n            color: #3f50b5;\n            cursor: pointer;\n\n            &:hover {\n              text-decoration: underline;\n            }\n          }\n        }\n\n        &.task-days {\n          text-wrap: none;\n          max-width: 100px;\n        }\n      }\n    }\n\n    button {\n      flex: 20%;\n      height: 100%;\n      border: none;\n      border-top-right-radius: 8px;\n      border-bottom-right-radius: 8px;\n      color: white;\n      cursor: pointer;\n\n      &:hover {\n        filter: brightness(120%);\n      }\n\n    }\n  }\n`;\n\n\nconst MAX_TASK_NAME_DISPLAY_LENGTH = 200;\n\nconst getTaskNamePreview = (taskName: string): string => taskName.substr(0, MAX_TASK_NAME_DISPLAY_LENGTH); // take the first 200 characters of the task name.\n\ninterface Props {\n    task: Task;\n    completeTask: (taskNameToDelete: string) => void;\n}\n\nexport const TodoTask: FC<Props> = (props) => {\n    const {task, completeTask} = props;\n\n    const [showMore, setShowMore] = useState<boolean>(false);\n\n    const isTextShortened = task.taskName.length > MAX_TASK_NAME_DISPLAY_LENGTH;\n\n    return (\n        <StyledTodoTask className=\"task\">\n            <div className=\"content\">\n                <div className=\"task-row-column task-name\">\n                    {isTextShortened\n                        ? (showMore ? task.taskName : getTaskNamePreview(task.taskName))\n                        : task.taskName\n                    }\n                    {isTextShortened && (\n                        <Box className=\"toggle-text-button\"\n                             onClick={() => setShowMore(!showMore)}\n                        >\n                            show {showMore ? 'less' : 'more'}\n                        </Box>\n                    )}\n                </div>\n\n                {/*\n                   i.e. \"if task.deadline != null then ...\",\n                */}\n                {task.deadline != null && task.deadline > 0 && (\n                    <div\n                        className=\"task-row-column task-days\">{task.deadline} {task.deadline !== 1 ? 'days' : 'day'}</div>\n                )}\n            </div>\n            <Button\n                onClick={() => completeTask(task.taskName)}\n                variant=\"contained\" color=\"primary\"\n                startIcon={<CheckIcon/>}\n            >\n                Done\n            </Button>\n        </StyledTodoTask>\n    );\n};\n","import React, {FC, useContext} from 'react'\nimport {Task} from \"../model/Task\";\nimport styled from \"styled-components\";\nimport {TodoTask} from \"./TodoTask\";\nimport {TodoContext} from \"./TodoContext\";\n\nconst StyledTodoList = styled.div`\n  &.todo-list {\n    flex: 80%;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    padding-top: 15px;\n    flex-direction: column;\n  }\n`;\n\nexport const TodoList: FC = (props) => {\n    const { todoList, setTodoList } = useContext(TodoContext);\n\n    const completeTask = (taskNameToDelete: string): void => {\n        setTodoList(todoList.filter((task) => {\n            return task.taskName !== taskNameToDelete\n        }));\n    };\n\n    return (\n        <StyledTodoList className=\"todo-list\">\n            {todoList.map((task: Task, key: number) => {\n                return <TodoTask key={key} task={task} completeTask={completeTask}/>;\n            })}\n        </StyledTodoList>\n    );\n};\n","import React, {FC} from 'react';\nimport './App.scss';\nimport {Header} from \"./components/Header\";\nimport {TodoContextProvider} from \"./components/TodoContext\";\nimport {TodoList} from \"./components/TodoList\";\nimport styled, {ThemeProvider} from \"styled-components\";\nimport {createMuiTheme} from \"@material-ui/core\";\n\nconst StyledApp = styled.div`\n  &.app {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    width: 100vw;\n    height: 100vh;\n    font-family: Arial, Helvetica, sans-serif;\n  }\n`;\n\nexport const App: FC = () => {\n    const theme = createMuiTheme({\n        palette: {\n            primary: {\n                light: '#757ce8',\n                main: '#3f50b5',\n                dark: '#002884',\n                contrastText: '#fff',\n            },\n            secondary: {\n                light: '#ff7961',\n                main: '#f44336',\n                dark: '#ba000d',\n                contrastText: '#000',\n            },\n        },\n    });\n\n    return (\n        <ThemeProvider theme={theme}>\n            <TodoContextProvider>\n                <StyledApp className=\"app\">\n                    <Header/>\n                    <TodoList/>\n                </StyledApp>\n            </TodoContextProvider>\n        </ThemeProvider>\n    );\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}